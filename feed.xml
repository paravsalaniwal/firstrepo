<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://paravsalaniwal.github.io/firstrepo/feed.xml" rel="self" type="application/atom+xml" /><link href="https://paravsalaniwal.github.io/firstrepo/" rel="alternate" type="text/html" /><updated>2023-02-13T13:57:43-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/feed.xml</id><title type="html">üìç</title><subtitle>Parav Salaniwal's fastpages</subtitle><entry><title type="html">Big Idea Lesson 5</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/02/13/Lesson5BI.html" rel="alternate" type="text/html" title="Big Idea Lesson 5" /><published>2023-02-13T00:00:00-06:00</published><updated>2023-02-13T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/02/13/Lesson5BI</id><author><name></name></author><summary type="html"><![CDATA[Lesson Notes Big Idea 5.1/5.2 Notes Big Idea 5.3/5.4 Notes Big Idea 5.5/5.6 Notes]]></summary></entry><entry><title type="html">5.5and5.6notes</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/02/13/5.5and5.6Notes.html" rel="alternate" type="text/html" title="5.5and5.6notes" /><published>2023-02-13T00:00:00-06:00</published><updated>2023-02-13T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/02/13/5.5and5.6Notes</id><author><name></name></author><summary type="html"><![CDATA[Big Idea 5.5]]></summary></entry><entry><title type="html">5.3and5.4notes</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/02/06/5.3and5.4Notes.html" rel="alternate" type="text/html" title="5.3and5.4notes" /><published>2023-02-06T00:00:00-06:00</published><updated>2023-02-06T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/02/06/5.3and5.4Notes</id><author><name></name></author><summary type="html"><![CDATA[Big Idea 5.3 (Computer Bias)]]></summary></entry><entry><title type="html">Project Blog</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/01/31/ProjectBlog.html" rel="alternate" type="text/html" title="Project Blog" /><published>2023-01-31T00:00:00-06:00</published><updated>2023-01-31T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/01/31/ProjectBlog</id><author><name></name></author><summary type="html"><![CDATA[Submission 1 Grading Expectation Explanation Program Purpose and Function Describes the purpose of the program, describes the program‚Äôs functionality, and can take an input and return an output. The purpose of this program is to provide the user with an entertaining and competitive experience through the gameplay of several virtual games like chess and battleship along with a game history page where users are able to view previous games and view an analysis of the gameplay. Data Abstraction Shows how data has been stored in a collection and shows data from that collection as it contributes to the overall purpose of the program. Identifies the name of a variable representing the collection being used and describes what the data contained in the collection represents in the program. Our program abstracts data through the creation of records that are accessed in a backend database. The purpose of this database is to store crucial information about a user such as the moves inputted and previous gameplay. This value can be used in our program to construct a history of games with the login information that they use for their account. We will also store a UserID, Name, and Password to identify users and authenticate their account to be able to save gameplay and revisit it. Managing Complexity Shows a collection of data that manages complexity. Explains an alternative method that would have been more complex and explains why that method could not be used or how it would have to be written differently. There will be multiple ways that we have complexity in our website as we have a variety of different games that will be functioning and live with another local player. This allows a unique variety of code as well and is all managed under the category of games. Procedural Abstraction Shows a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure, and shows where that procedure is called. Describes how the procedure contributes to the functionality of the program. This may be found in every game we create because they are all sufficiently complex to need a function with a parameter. Algorithm Implementation Includes a student-developed algorithm that includes sequencing, selection, and iteration. Explains how the algorithm works in detail enough to where someone could recreate it. The games we create for the online arcade will have enough algorithms to satisfy this need. Testing Describe two calls to the selected procedure in response 3c. Each call must pass a argument that causes different outputs. Describes conditions being tested by each call. Identifies the result of each call. In each game, we‚Äôll test two distinct features that examine various aspects of the java backend and produce various outputs.]]></summary></entry><entry><title type="html">5.1and5.2notes</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/01/31/5.1and5.2Notes.html" rel="alternate" type="text/html" title="5.1and5.2notes" /><published>2023-01-31T00:00:00-06:00</published><updated>2023-01-31T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/01/31/5.1and5.2Notes</id><author><name></name></author><summary type="html"><![CDATA[Big Idea 5.1 Notes]]></summary></entry></feed>