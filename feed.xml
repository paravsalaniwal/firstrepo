<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://paravsalaniwal.github.io/firstrepo/feed.xml" rel="self" type="application/atom+xml" /><link href="https://paravsalaniwal.github.io/firstrepo/" rel="alternate" type="text/html" /><updated>2023-01-31T13:37:49-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/feed.xml</id><title type="html">üìç</title><subtitle>Parav Salaniwal's fastpages</subtitle><entry><title type="html">Project Blog</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/01/31/ProjectBlog.html" rel="alternate" type="text/html" title="Project Blog" /><published>2023-01-31T00:00:00-06:00</published><updated>2023-01-31T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/01/31/ProjectBlog</id><author><name></name></author><summary type="html"><![CDATA[Submission 1 Grading Expectation Explanation Program Purpose and Function Describes the purpose of the program, describes the program‚Äôs functionality, and can take an input and return an output. The purpose of this program is to provide the user with an entertaining and competitive experience through the gameplay of several virtual games like chess and tic-tac-toe along with a game history page where users are able to view previous games and view an analysis of the gameplay. Data Abstraction Shows how data has been stored in a collection and shows data from that collection as it contributes to the overall purpose of the program. Identifies the name of a variable representing the collection being used and describes what the data contained in the collection represents in the program. Our program abstracts data through the creation of records that are accessed in a backend database. The purpose of this database is to store crucial information about a user such as the moves inputted and previous gameplay. This value can be used in our program to construct a history of games with the login information that they use for their account. We will also store a UserID, Name, and Password to identify users and authenticate their account to be able to save gameplay and revisit it. Managing Complexity Shows a collection of data that manages complexity. Explains an alternative method that would have been more complex and explains why that method could not be used or how it would have to be written differently. - Procedural Abstraction Shows a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure, and shows where that procedure is called. Describes how the procedure contributes to the functionality of the program. - Algorithm Implementation Includes a student-developed algorithm that includes sequencing, selection, and iteration. Explains how the algorithm works in detail enough to where someone could recreate it. - Testing Describe two calls to the selected procedure in response 3c. Each call must pass a argument that causes different outputs. Describes conditions being tested by each call. Identifies the result of each call. -]]></summary></entry><entry><title type="html">5.1and5.2notes</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/01/31/5.1and5.2Notes.html" rel="alternate" type="text/html" title="5.1and5.2notes" /><published>2023-01-31T00:00:00-06:00</published><updated>2023-01-31T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/01/31/5.1and5.2Notes</id><author><name></name></author><summary type="html"><![CDATA[Big Idea 5.1 Notes]]></summary></entry><entry><title type="html">CB MCQ</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/01/30/CBMCQ2Corrections.html" rel="alternate" type="text/html" title="CB MCQ" /><published>2023-01-30T00:00:00-06:00</published><updated>2023-01-30T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/01/30/CBMCQ2Corrections</id><author><name></name></author><summary type="html"><![CDATA[Total Score:]]></summary></entry><entry><title type="html">CPT Grading 3</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/01/22/CPTScoring3.html" rel="alternate" type="text/html" title="CPT Grading 3" /><published>2023-01-22T00:00:00-06:00</published><updated>2023-01-22T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/01/22/CPTScoring3</id><author><name></name></author><summary type="html"><![CDATA[Submission 1 Grading Student Scoring CB Grading Additional Comments Program Purpose and Function 1 1 The result of the rock paper scissors game is either Win, Lose, or Draw, which makes the program‚Äôs goal extremely obvious and its output simple to comprehend. Data Abstraction 0 0 The list RPS has a variable linked with it, but the list being used to achieve the project‚Äôs goal isn‚Äôt existent, therefore none of the conditions are satisfied here. Managing Complexity 0 0 Although the lists function is described, it is not stated what would occur if the list is not utilized in the application. Procedural Abstraction 0 0 The remaining components of the function rpsGame() match the requirements, however the function‚Äôs overall usage within the program is not specified. Algorithm Implementation 1 1 Here, it is evident that sequencing, iteration, and selection are being employed, and the user‚Äôs input results in a clearly defined output. Testing 1 1 Each call‚Äôs requirements and every call‚Äôs output are specified in detail, along with the expected outcome.]]></summary></entry><entry><title type="html">CPT Grading</title><link href="https://paravsalaniwal.github.io/firstrepo/2023/01/15/CPTScoring2.html" rel="alternate" type="text/html" title="CPT Grading" /><published>2023-01-15T00:00:00-06:00</published><updated>2023-01-15T00:00:00-06:00</updated><id>https://paravsalaniwal.github.io/firstrepo/2023/01/15/CPTScoring2</id><author><name></name></author><summary type="html"><![CDATA[Student 1]]></summary></entry></feed>